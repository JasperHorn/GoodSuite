- scripts will be delimited by "<:" and ":>" (no apostrophes of course)
- comments will be delimited by "<:-" and "-:>" (still no apostrophes)
- script can be inside and outside script tags
- a script can have either one or more statements, if more they must be seperated by semicolons (";")
- each statement does one of the following:
	- print a value to the file
	- executes a function (there are only two functions for now)
	- defines a part of a control structure

The functions are:
	- include(filename) - this includes another file, at the point where it is written
					the included file will be parsed like any other contents of the template
	- nameForCounter(varName) - this will bind the varName to the counter that counts the loops
							  the most recent for or foreach loop, for use in the file
							  NameForCounter will only be executed the first time a loop is
							  in for loops the counter can count up or down, in foreach loops it
							  always counts down.
	Please note that fileName will be a string, encapsulated by (single?) apostrophes if a literal (and thus
	variables can be used in it), while varName will not be. It will always be a literal and it won't
	have anything around it.

The control structures are:
	- if (condition) - the following code and/or literal text will only be executed if condition is true
	- end if - the following code and/or literal text will no longer be influenced by the last if
			   must be present for if statement to work
	- foreach(varName in array) - the following code and/or literal will be executed once for each
							  element the array has, that element being stored varName during
							  any code it applies to. varName will be accessible like any
							  registered variable under any circumstances
	- end foreach - end of the block that will be executed for each member of the array
				must be present for foreach statement to work
	- for(beginValue {--> or ++>} endValue) - will execute the following content a number fo times,
									 namely, when a variable has gotten from beginValue to
									 endValue by increasing (++>) or decreasing (-->) by one
									 every time through the loop. Executes for both beginValue
									 and endValue as well (if reached, that is. With beginValue 1
									 and endValue 9.5, 9.5 won't be executed).
									 Should give an error if with chosen operation endValue will
									 not be reached from beginValue
	-------------- Rethinking this (while I like the --> notation (it just looks good :D)
	                                the ++> is just plain ugly and confusing. All the same,
									one symbol would be enough - as only one route is to be
									used - the correct one, the one that would not cause 
									an infinte loop ;)
	- end for - denotes the end of a for structure
			 must be present for the for statement to work

The rules for printing values to the screen are:
	- Types of content that may be used are:
		- variables
		- literal numbers
		Note that literal strings may not be used, simply close the script if you need to
		print a literal string to the file
		---- Rethinking this (even though there may just be an easy other solution,
		                      why should I prohibit printing a literal string?)

	- Operations that may be used are:
		- adding (+)
		- subtracting (-)
		- multiplying (*)
		- dividing (/)
		- modulus (%)

		Concatenating is not allowed - just print two things right after each other if you need to
		Parentheses may be used to alter the order in which operations should be executed
		These operations may also be used in if-statements, function calls or choosing an array
	- A statement that prints a value to the file must consist of one or more variables
	  or literal numbers. If more than one value is used, there must be a operations between each
	  value. Parentheses may be used to prioritise operations



Other operations that may be used are:

	- Logical operations:
		these are only to be used inside if statements
		---- Rethinking this (why make a fuss - it's probably going to be the same function
		----                  doing the work anyway)
		slashes indicate that there are two ways to invoke the operation
		- and / && - returns true if the preceding and the following statements are true
		- or / || - returns true if the preceeding or the following statements are true
	- Comparison operations
		these are only to be used inside if statements
		slashes indicate that there are two ways to invoke the operation
		- == / = - equals, returns true if the preceeding and following statements are true
				   preference is given to "==", but since there is no other use for "=" you may use it as well
		- != - does not equal, returns true if the preceeding and following statement are not the same
		- ! - not, returns true if the following statements is false
		- > - more than, returns true if the preceeding number is larger than the following
		- < - less than, returns true if the preceeding number is less than the following
		- <= - less than or equal to, returns true if either < or == would
		- >= - more than or equal to, returns true if either > or == would

	- Concatenation
		Concatenation may only be used in function calls and choosing an array element
		---- rethinking this (why make a fuss, it'll probably be the same function called anyway)
		To please all programmers both '+' and '.' may be used for concatenation
		(it's not like I am going to be short on symbols)
		When trying to concatenate when not allowed an error might be thrown about an
		unexpected symbol, or not being able to add up strings
		If the '+' operator is used, if both arguments are strings, or the first is a string and the second a
		number they will be concatenated, if both arguments are numbers they will be added up
		If you would supply a number for the first and a string for the second value, an error will be thrown
		If the '.' operator is used, the two values will always be concatenated, even if they are both numbers
		-> Allowing '+' for both concatenation and addition while using variables
		   that may have any type and making compiled code will only result in
		   messy compiled code and extra (complicated) code needed in the compile
		   script - thus I will restrict concatenation to only the dot
		----> I am not so sure about my previous comment, as even in the compiled 
			  version we can of course draw upon functions that are from the
			  templating system
		-------> Final conclusion: not in the earlier versions, maybe later (double using +)